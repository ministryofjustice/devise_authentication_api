class User
  include Mongoid::Document
  # Include default devise modules. Others available are:
  # :lockable, :timeoutable and :omniauthable
  devise :database_authenticatable, :registerable,
         :recoverable, :rememberable, :trackable, :validatable,
         :confirmable

  ## Database authenticatable
  field :email,              type: String, default: ""
  field :encrypted_password, type: String, default: ""

  ## Recoverable
  field :reset_password_token,   type: String
  field :reset_password_sent_at, type: Time

  ## Rememberable
  field :remember_created_at, type: Time

  ## Trackable
  field :sign_in_count,      type: Integer, default: 0
  field :current_sign_in_at, type: Time
  field :last_sign_in_at,    type: Time
  field :current_sign_in_ip, type: String
  field :last_sign_in_ip,    type: String

  ## Confirmable
  field :confirmation_token,   type: String
  field :confirmed_at,         type: Time
  field :confirmation_sent_at, type: Time
  field :unconfirmed_email,    type: String # Only if using reconfirmable

  ## Lockable
  # field :failed_attempts, type: Integer, default: 0 # Only if lock strategy is :failed_attempts
  # field :unlock_token,    type: String # Only if unlock strategy is :email or :both
  # field :locked_at,       type: Time


  field :authentication_token, type: String

  index({ authentication_token: 1 }, { unique: true })

  before_save :ensure_authentication_token

  class << self
    def for_authentication_token token
      if where(authentication_token: token).exists?
        where(authentication_token: token).first
      else
        nil
      end
    end
  end

  def ensure_authentication_token
    if authentication_token.blank?
      self.authentication_token = generate_authentication_token
    end
  end

  alias :old_to_json :to_json

  def to_json options
    fields = JSON.parse(old_to_json).except('_id')

    if @raw_confirmation_token
      # @raw_confirmation_token is generated by Devise::Models::Confirmable module
      fields.merge!(confirmation_token: @raw_confirmation_token)
    else
      fields.merge!(authentication_token: authentication_token)
    end

    fields.to_json
  end

  private

  def generate_authentication_token
    loop do
      token = Devise.friendly_token
      break token unless User.where(authentication_token: token).exists?
    end
  end
end

